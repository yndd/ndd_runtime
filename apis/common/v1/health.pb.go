// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apis/common/v1/health.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthCondition struct {
	ResourceName         string          `protobuf:"bytes,1,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	HealthKind           string          `protobuf:"bytes,2,opt,name=healthKind,proto3" json:"healthKind,omitempty"`
	Status               ConditionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=common.v1.ConditionStatus" json:"status,omitempty"`
	LastTransitionTime   *v1.Time        `protobuf:"bytes,4,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,omitempty"`
	Reason               ConditionReason `protobuf:"varint,5,opt,name=reason,proto3,enum=common.v1.ConditionReason" json:"reason,omitempty"`
	Message              string          `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HealthCondition) Reset()         { *m = HealthCondition{} }
func (m *HealthCondition) String() string { return proto.CompactTextString(m) }
func (*HealthCondition) ProtoMessage()    {}
func (*HealthCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_dce9d252c3b78e52, []int{0}
}
func (m *HealthCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCondition.Merge(m, src)
}
func (m *HealthCondition) XXX_Size() int {
	return m.Size()
}
func (m *HealthCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCondition.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCondition proto.InternalMessageInfo

func (m *HealthCondition) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *HealthCondition) GetHealthKind() string {
	if m != nil {
		return m.HealthKind
	}
	return ""
}

func (m *HealthCondition) GetStatus() ConditionStatus {
	if m != nil {
		return m.Status
	}
	return ConditionStatus_ConditionStatus_Unknown
}

func (m *HealthCondition) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *HealthCondition) GetReason() ConditionReason {
	if m != nil {
		return m.Reason
	}
	return ConditionReason_ConditionReason_Unspecified
}

func (m *HealthCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type HealthConditionedStatus struct {
	Percentage           uint32             `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	LastTransitionTime   *v1.Time           `protobuf:"bytes,2,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,omitempty"`
	HealthConditions     []*HealthCondition `protobuf:"bytes,3,rep,name=healthConditions,proto3" json:"healthConditions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HealthConditionedStatus) Reset()         { *m = HealthConditionedStatus{} }
func (m *HealthConditionedStatus) String() string { return proto.CompactTextString(m) }
func (*HealthConditionedStatus) ProtoMessage()    {}
func (*HealthConditionedStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_dce9d252c3b78e52, []int{1}
}
func (m *HealthConditionedStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthConditionedStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthConditionedStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthConditionedStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthConditionedStatus.Merge(m, src)
}
func (m *HealthConditionedStatus) XXX_Size() int {
	return m.Size()
}
func (m *HealthConditionedStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthConditionedStatus.DiscardUnknown(m)
}

var xxx_messageInfo_HealthConditionedStatus proto.InternalMessageInfo

func (m *HealthConditionedStatus) GetPercentage() uint32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *HealthConditionedStatus) GetLastTransitionTime() *v1.Time {
	if m != nil {
		return m.LastTransitionTime
	}
	return nil
}

func (m *HealthConditionedStatus) GetHealthConditions() []*HealthCondition {
	if m != nil {
		return m.HealthConditions
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCondition)(nil), "common.v1.HealthCondition")
	proto.RegisterType((*HealthConditionedStatus)(nil), "common.v1.HealthConditionedStatus")
}

func init() { proto.RegisterFile("apis/common/v1/health.proto", fileDescriptor_dce9d252c3b78e52) }

var fileDescriptor_dce9d252c3b78e52 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xbd, 0x8a, 0x1b, 0x31,
	0x18, 0x8c, 0xec, 0xc4, 0xc1, 0x72, 0xfe, 0xd8, 0x26, 0x8b, 0x03, 0x8b, 0x71, 0xb5, 0xb8, 0x90,
	0xb0, 0x93, 0x22, 0x45, 0xaa, 0x04, 0x42, 0x20, 0x90, 0x62, 0xe3, 0xca, 0x4d, 0x90, 0x57, 0x1f,
	0xbb, 0xc2, 0x96, 0xb4, 0x48, 0x5a, 0x83, 0xdf, 0x24, 0xef, 0x71, 0x2f, 0x71, 0xe5, 0xbd, 0xc0,
	0xc1, 0xe1, 0x7b, 0x91, 0x43, 0x5a, 0xdb, 0x78, 0x7d, 0xe7, 0xee, 0x4a, 0xcd, 0x37, 0x33, 0x9a,
	0xf9, 0xf8, 0xf0, 0x27, 0x56, 0x09, 0x4b, 0x73, 0x2d, 0xa5, 0x56, 0x74, 0x33, 0xa5, 0x25, 0xb0,
	0xb5, 0x2b, 0x49, 0x65, 0xb4, 0xd3, 0x51, 0xbf, 0xc1, 0xc9, 0x66, 0x3a, 0xfc, 0xb2, 0xfa, 0x6a,
	0x89, 0xd0, 0x94, 0x55, 0x42, 0xb2, 0xbc, 0x14, 0x0a, 0xcc, 0x96, 0x56, 0xab, 0x82, 0x06, 0xbd,
	0x04, 0xc7, 0xbc, 0xba, 0x00, 0x05, 0x86, 0x39, 0xe0, 0x8d, 0xc1, 0x30, 0x39, 0x73, 0xcf, 0xb5,
	0xe2, 0xc2, 0x09, 0xad, 0x9a, 0xf9, 0xf8, 0xaa, 0x83, 0xdf, 0xff, 0x0a, 0x3f, 0xfe, 0x38, 0x4c,
	0xa2, 0x31, 0x7e, 0x63, 0xc0, 0xea, 0xda, 0xe4, 0xf0, 0x87, 0x49, 0x88, 0xd1, 0x08, 0xa5, 0xfd,
	0xac, 0x85, 0x45, 0x09, 0xc6, 0x4d, 0xd0, 0xdf, 0x42, 0xf1, 0xb8, 0x13, 0x18, 0x27, 0x48, 0x34,
	0xc3, 0x3d, 0xeb, 0x98, 0xab, 0x6d, 0xdc, 0x1d, 0xa1, 0xf4, 0xdd, 0x6c, 0x48, 0x8e, 0x4d, 0xc8,
	0xf1, 0xa7, 0xbf, 0x81, 0x91, 0xed, 0x99, 0xd1, 0x02, 0x47, 0x6b, 0x66, 0xdd, 0xdc, 0x30, 0x65,
	0xc3, 0x7c, 0x2e, 0x24, 0xc4, 0x2f, 0x47, 0x28, 0x1d, 0xcc, 0x26, 0xa4, 0xa9, 0x4f, 0x4e, 0xeb,
	0x93, 0x6a, 0x55, 0x78, 0xc0, 0x12, 0x5f, 0xdf, 0x5b, 0x7b, 0x45, 0xf6, 0x84, 0x8b, 0xcf, 0x63,
	0x80, 0x59, 0xad, 0xe2, 0x57, 0x97, 0xf3, 0x64, 0x81, 0x91, 0xed, 0x99, 0x51, 0x8c, 0x5f, 0x4b,
	0xb0, 0x96, 0x15, 0x10, 0xf7, 0x42, 0xc1, 0xc3, 0x73, 0x7c, 0x8b, 0xf0, 0xc7, 0xb3, 0xad, 0x01,
	0x6f, 0xda, 0xf8, 0xcd, 0x54, 0x60, 0x72, 0x50, 0xce, 0x0b, 0xfd, 0xee, 0xde, 0x66, 0x27, 0xc8,
	0x85, 0x96, 0x9d, 0x67, 0x69, 0xf9, 0x13, 0x7f, 0x28, 0xdb, 0xb1, 0xfc, 0xfe, 0xbb, 0xe9, 0xa0,
	0xd5, 0xf7, 0x2c, 0x79, 0xf6, 0x48, 0xf3, 0xfd, 0xdb, 0xf5, 0x2e, 0x41, 0x37, 0xbb, 0x04, 0xdd,
	0xed, 0x12, 0xf4, 0xff, 0x3e, 0x79, 0xb1, 0x98, 0x14, 0xc2, 0x95, 0xf5, 0xd2, 0xbb, 0xd0, 0xad,
	0xe2, 0x9c, 0x2a, 0xce, 0xff, 0x99, 0x5a, 0x39, 0x21, 0x81, 0xb6, 0x6f, 0x6c, 0xd9, 0x0b, 0xa7,
	0xf5, 0xf9, 0x21, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x43, 0x1d, 0x63, 0xda, 0x02, 0x00, 0x00,
}

func (m *HealthCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.Reason != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x28
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHealth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HealthKind) > 0 {
		i -= len(m.HealthKind)
		copy(dAtA[i:], m.HealthKind)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.HealthKind)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceName) > 0 {
		i -= len(m.ResourceName)
		copy(dAtA[i:], m.ResourceName)
		i = encodeVarintHealth(dAtA, i, uint64(len(m.ResourceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthConditionedStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthConditionedStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthConditionedStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HealthConditions) > 0 {
		for iNdEx := len(m.HealthConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HealthConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHealth(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastTransitionTime != nil {
		{
			size, err := m.LastTransitionTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHealth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Percentage != 0 {
		i = encodeVarintHealth(dAtA, i, uint64(m.Percentage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHealth(dAtA []byte, offset int, v uint64) int {
	offset -= sovHealth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HealthCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceName)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	l = len(m.HealthKind)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovHealth(uint64(m.Status))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovHealth(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovHealth(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHealth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthConditionedStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Percentage != 0 {
		n += 1 + sovHealth(uint64(m.Percentage))
	}
	if m.LastTransitionTime != nil {
		l = m.LastTransitionTime.Size()
		n += 1 + l + sovHealth(uint64(l))
	}
	if len(m.HealthConditions) > 0 {
		for _, e := range m.HealthConditions {
			l = e.Size()
			n += 1 + l + sovHealth(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHealth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHealth(x uint64) (n int) {
	return sovHealth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HealthCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConditionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= ConditionReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthConditionedStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthConditionedStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthConditionedStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			m.Percentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percentage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTransitionTime == nil {
				m.LastTransitionTime = &v1.Time{}
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthConditions = append(m.HealthConditions, &HealthCondition{})
			if err := m.HealthConditions[len(m.HealthConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHealth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHealth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHealth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHealth = fmt.Errorf("proto: unexpected end of group")
)
