// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: apis/common/v1/oda.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OdaKind int32

const (
	OdaKind_OdaKind_Unknown          OdaKind = 0
	OdaKind_OdaKind_Organization     OdaKind = 1
	OdaKind_OdaKind_Deployment       OdaKind = 2
	OdaKind_OdaKind_AvailabilityZone OdaKind = 3
)

var OdaKind_name = map[int32]string{
	0: "OdaKind_Unknown",
	1: "OdaKind_Organization",
	2: "OdaKind_Deployment",
	3: "OdaKind_AvailabilityZone",
}

var OdaKind_value = map[string]int32{
	"OdaKind_Unknown":          0,
	"OdaKind_Organization":     1,
	"OdaKind_Deployment":       2,
	"OdaKind_AvailabilityZone": 3,
}

func (x OdaKind) String() string {
	return proto.EnumName(OdaKind_name, int32(x))
}

func (OdaKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6d2d4ff648565b91, []int{0}
}

type OdaInfo struct {
	Oda                  map[string]string `protobuf:"bytes,1,rep,name=oda,proto3" json:"oda,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OdaInfo) Reset()         { *m = OdaInfo{} }
func (m *OdaInfo) String() string { return proto.CompactTextString(m) }
func (*OdaInfo) ProtoMessage()    {}
func (*OdaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d2d4ff648565b91, []int{0}
}
func (m *OdaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OdaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OdaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OdaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OdaInfo.Merge(m, src)
}
func (m *OdaInfo) XXX_Size() int {
	return m.Size()
}
func (m *OdaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OdaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OdaInfo proto.InternalMessageInfo

func (m *OdaInfo) GetOda() map[string]string {
	if m != nil {
		return m.Oda
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.v1.OdaKind", OdaKind_name, OdaKind_value)
	proto.RegisterType((*OdaInfo)(nil), "common.v1.OdaInfo")
	proto.RegisterMapType((map[string]string)(nil), "common.v1.OdaInfo.OdaEntry")
}

func init() { proto.RegisterFile("apis/common/v1/oda.proto", fileDescriptor_6d2d4ff648565b91) }

var fileDescriptor_6d2d4ff648565b91 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xbb, 0x0d, 0xfe, 0xe9, 0x78, 0x30, 0xac, 0x45, 0x16, 0x95, 0x50, 0x3c, 0x95, 0x82,
	0x59, 0xaa, 0x20, 0x22, 0x5e, 0x14, 0x3d, 0x88, 0x87, 0x42, 0xc1, 0x4b, 0x2f, 0x65, 0xe3, 0xae,
	0x75, 0x69, 0x32, 0x13, 0xe2, 0x26, 0x12, 0x9f, 0xc4, 0x47, 0xf2, 0xe8, 0x23, 0x48, 0x7c, 0x11,
	0x49, 0xda, 0x08, 0x9e, 0xf6, 0xdb, 0xdf, 0xfc, 0x60, 0x98, 0x0f, 0x84, 0x4a, 0xed, 0xab, 0x7c,
	0xa2, 0x24, 0x21, 0x94, 0xc5, 0x58, 0x92, 0x56, 0x61, 0x9a, 0x91, 0x23, 0xde, 0x5b, 0xc1, 0xb0,
	0x18, 0x1f, 0xa7, 0xb0, 0x35, 0xd1, 0xea, 0x1e, 0x9f, 0x89, 0x9f, 0x80, 0x47, 0x5a, 0x09, 0x36,
	0xf0, 0x86, 0x3b, 0xa7, 0x87, 0xe1, 0x9f, 0x13, 0xae, 0x85, 0xfa, 0xbd, 0x43, 0x97, 0x95, 0xd3,
	0xda, 0x3b, 0x38, 0x87, 0xed, 0x16, 0x70, 0x1f, 0xbc, 0xa5, 0x29, 0x05, 0x1b, 0xb0, 0x61, 0x6f,
	0x5a, 0x47, 0xde, 0x87, 0x8d, 0x42, 0xc5, 0xb9, 0x11, 0xdd, 0x86, 0xad, 0x3e, 0x97, 0xdd, 0x0b,
	0x36, 0xc2, 0x66, 0xe3, 0x83, 0x45, 0xcd, 0xf7, 0x60, 0x77, 0x1d, 0xe7, 0x8f, 0xb8, 0x44, 0x7a,
	0x43, 0xbf, 0xc3, 0x05, 0xf4, 0x5b, 0x38, 0xc9, 0x16, 0x0a, 0xed, 0xbb, 0x72, 0x96, 0xd0, 0x67,
	0x7c, 0x1f, 0x78, 0x3b, 0xb9, 0x35, 0x69, 0x4c, 0x65, 0x62, 0xd0, 0xf9, 0x5d, 0x7e, 0x04, 0xa2,
	0xe5, 0xd7, 0x85, 0xb2, 0xb1, 0x8a, 0x6c, 0x6c, 0x5d, 0x39, 0x23, 0x34, 0xbe, 0x77, 0x73, 0xf5,
	0x59, 0x05, 0xec, 0xab, 0x0a, 0xd8, 0x77, 0x15, 0xb0, 0x8f, 0x9f, 0xa0, 0x33, 0x1b, 0x2d, 0xac,
	0x7b, 0xc9, 0xa3, 0xfa, 0x42, 0x59, 0xa2, 0xd6, 0x12, 0xb5, 0x9e, 0x67, 0x39, 0x3a, 0x9b, 0x18,
	0xf9, 0xbf, 0xb4, 0x68, 0xb3, 0x69, 0xec, 0xec, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x4a, 0xd1,
	0x30, 0x4d, 0x01, 0x00, 0x00,
}

func (m *OdaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OdaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OdaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Oda) > 0 {
		for k := range m.Oda {
			v := m.Oda[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOda(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOda(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOda(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOda(dAtA []byte, offset int, v uint64) int {
	offset -= sovOda(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OdaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oda) > 0 {
		for k, v := range m.Oda {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOda(uint64(len(k))) + 1 + len(v) + sovOda(uint64(len(v)))
			n += mapEntrySize + 1 + sovOda(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOda(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOda(x uint64) (n int) {
	return sovOda(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OdaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOda
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OdaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OdaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oda", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOda
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oda == nil {
				m.Oda = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOda
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOda
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOda
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOda
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOda
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOda
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOda
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOda(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthOda
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Oda[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOda(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOda
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOda(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOda
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOda
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOda
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOda
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOda
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOda
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOda        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOda          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOda = fmt.Errorf("proto: unexpected end of group")
)
